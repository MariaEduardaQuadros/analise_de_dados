# -*- coding: utf-8 -*-
"""projeto_atualizado.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12dHAnfXXNA3cIYzK0EVaEPTUo2CUedPi

**Leitura do arquivo de dados**
"""

#Leitura do arquivo

import pandas as pd #Biblioteca pandas

dados = pd.read_csv('OK_Anexo_Arquivo_Dados_Projeto.csv', sep=';') #Separador de arquivo.

dados.head(10) #Visualização apenas dos 10 primeiros dados.

type(dados) #Verificar tipo dos dados

dados.shape #Verificar quantidade de linhas e colunas do arquivo

dados.columns #Verificar colunas do arquivo

dados.info() #Visualizar informações dos dados do arquivo

dados.isnull().sum() #Verificar dados nulos

"""**Correção de preciptações negativas**"""

dados.query('precip < 0').index #Verificar preciptações negativas.

registros_a_remover = dados.query('precip < 0').index

dados.drop(registros_a_remover, axis=0, inplace=True)

dados.query('precip < 0')

dados.head(10) #Visualização dados com temperaturas inconsistentes removidas

dados.query('precip < 0').index

"""**Visualização de intervalos de dados**"""

def mostrar_filtros(dados):
#Entrada do usuário
    primeira_data = input("Escreva o mês e ano inicial para visualização de dados (mm/aaaa) (Lembre-se: os dados iniciam em 01/1961 e terminam em 07/2016): ")
    segunda_data = input("Escreva o mês e ano final para visualização de dados (mm/aaaa)(Lembre-se: os dados iniciam em 01/1961 e terminam em 07/2016): ")
    opcao = input("Escolha os dados que deseja visualizar:\n1 - Todos os dados\n2 - Apenas precipitação\n3 - Apenas temperatura\n4 - Umidade e Vento\n")

#Formatação da data
    dados['data'] = pd.to_datetime(dados['data'], format='%d/%m/%Y')

#Seleção do mês e ano inicial e final
    mes_inicial, ano_inicial = map(int, primeira_data.split('/'))
    mes_final, ano_final = map(int, segunda_data.split('/'))

#Filtragem para exibir apenas os dados solicitados
    dados_filtrados = dados[
        (dados['data'].dt.year >= ano_inicial) & (dados['data'].dt.year <= ano_final) &
        (dados['data'].dt.month >= mes_inicial) & (dados['data'].dt.month <= mes_final)
    ].copy()

    dados_filtrados['data'] = dados_filtrados['data'].dt.strftime('%d/%m/%Y')

#Escolher colunas da tabela a serem visualizadas
    if opcao == '2':
        dados_filtrados = dados_filtrados[['data', 'precip']]
    elif opcao == '3':
        dados_filtrados = dados_filtrados[['data', 'temp_media']]
    elif opcao == '4':
        dados_filtrados = dados_filtrados[['data', 'um_relativa', 'vel_vento']]

#Exibição de dados
    print(dados_filtrados)

mostrar_filtros(dados)

"""

**Mês mais chuvoso**

Abaixo estará o ano/mês mais chuvoso!"""

#Data mais chuvosa
def encontrar_data_mais_chuvosa(dados):
    data_chuvosa = {}

    for _, row in dados.iterrows():
        mes_ano = row['data'].strftime('%d-%m-%Y')
        precipitacao = row['precip']
        data_chuvosa[mes_ano] = precipitacao

    dia_chuvoso = max(data_chuvosa, key=data_chuvosa.get)
    maior_precipitacao = data_chuvosa[dia_chuvoso]

    return dia_chuvoso, maior_precipitacao

dia_chuvoso, maior_precipitacao = encontrar_data_mais_chuvosa(dados)
print("Data mais chuvosa:", dia_chuvoso)
print("A preciptação nesse dia foi de:", maior_precipitacao)

"""**Data/Ano mais chuvosos:**"""

# Mês e ano em inteiros
dados['ano'] = dados['data'].dt.year.astype(int)
dados['mes'] = dados['data'].dt.month.astype(int)

# Precipitação do ano e mês
precip_total = dados.groupby(['ano', 'mes'])['precip'].sum().reset_index()

# Ano/mês com a maior precipitação
mais_chuvoso = precip_total.loc[precip_total['precip'].idxmax()]

# Exibição dos dados
print("O ano/mês com a maior precipitação é:")
print("Ano:", int(mais_chuvoso['ano']))
print("Mês:", int(mais_chuvoso['mes']))
print("A precipitação total nesse ano/mês foi de:", mais_chuvoso['precip'])

"""**Média da temperatura entre 2006 e 2016**"""

#Data e ano
dados["mes"] = dados["data"].dt.month
dados["ano"] = dados["data"].dt.year

#Escolher mês
mes_escolhido = int(input("Digite o número do mês (1-12): "))

#Filtro anos de 2006 a 2016
filtro_dados = dados[(dados["mes"] == mes_escolhido) & (dados["ano"].between(2006, 2016))]

# Calcular a média da temperatura mínima para cada ano
media_anual = filtro_dados.groupby("ano")["minima"].mean()

# Imprimir as médias por ano
for ano, media in media_anual.items():
    print(f"Média da temperatura mínima para o mês {mes_escolhido}/{ano}: {media:.2f} graus")

# Calcular a média geral da temperatura mínima para todo o período
media_total = filtro_dados["minima"].mean()

# Imprimir a média geral
print(f"Média geral da temperatura mínima para o mês {mes_escolhido}: {media_total:.2f} graus")

"""**Gráfico**"""

import matplotlib.pyplot as plt

plt.bar(media_anual.index, media_anual.values, color='purple')

# Definir rótulos e título do gráfico
plt.xlabel("Ano")
plt.ylabel("Média da Temperatura Mínima")
plt.title(f"Média da Temperatura Mínima para o mês {mes_escolhido}")

plt.show()